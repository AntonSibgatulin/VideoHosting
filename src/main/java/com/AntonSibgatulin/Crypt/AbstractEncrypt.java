package com.AntonSibgatulin.Crypt;

import java.security.SecureRandom;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public abstract class AbstractEncrypt {
public String[] letter = {"q","w","e","r","t","y","u","i","o","p"
						 ,"a","s","d","f","g","h","j","k","k","l"
						 ,"z","x","c","v","b","n","m"
						 ,"Q","W","E","R","T","Y","U","I","O","P"
						 ,"A","S","D","F","G","H","J","K","L"
						 ,"Z","X","C","V","B","N","M"};
public Map<String,Integer> letterMap = new HashMap<>();
public Map<Integer,String> letterInt = new HashMap<>();
protected static final int AUTH_TAG_SIZE = 128; // bits

// NIST recommendation: "For IVs, it is recommended that implementations
// restrict support to the length of 96 bits, to
// promote interoperability, efficiency, and simplicity of design."
protected static final int IV_LEN = 12; // bytes

// number of random number bytes generated before re-seeding
protected static final double PRNG_RESEED_INTERVAL = Math.pow(2, 16);

protected static final String ENCRYPT_ALGO = "AES/GCM/NoPadding";

protected static final List<Integer> ALLOWED_KEY_SIZES = Arrays
    .asList(new Integer[] {128, 192, 256}); // bits

protected static SecureRandom prng;

// Used to keep track of random number bytes generated by PRNG
// (for the purpose of re-seeding)
protected static int bytesGenerated = 0;
//public Map<Integer,String> letterInt = new HashMap<>();

public AbstractEncrypt(){
	for(int i = 0;i<letter.length;i++){
		letterMap.put(letter[i],i);
		letterInt.put(i, letter[i]);
	}
}
public String getKey(int str){
	return letterInt.get(str);
}
public int getIndex(String str){
	return letterMap.get(str);
}
}
